{"version":3,"sources":["components/MarkdownEditor.js","components/MarkdownPreview.js","components/MarkdownPreviewer.js","index.js"],"names":["MarkdownEditor","props","text","change","react_default","a","createElement","reactstrap_es","for","type","name","id","rows","onChange","defaultValue","MarkdownPreview","htmlText","dangerouslySetInnerHTML","MarkdownPreviewer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onloadStr","renderer","marked","Renderer","link","href","title","concat","setOptions","breaks","state","getMarkdown","handleChange","bind","assertThisInitialized","event","textValue","target","value","setState","__html","sanitize","className","xs","components_MarkdownEditor","components_MarkdownPreview","Component","ReactDOM","render","components_MarkdownPreviewer","document","getElementById"],"mappings":"oOAuBeA,EApBQ,SAACC,GACpB,IAAMC,EAAOD,EAAMC,KACbC,EAASF,EAAME,OACrB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,IAAI,UAAX,yCAGAJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOE,KAAK,WACRC,KAAK,SACLC,GAAG,SACHC,KAAK,KACLC,SAAUV,EACVW,aAAcZ,OCHnBa,EAXS,SAACd,GACrB,IAAMe,EAAWf,EAAMe,SACvB,OACIZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,WAASK,GAAG,UACRM,wBAAyBD,sBC4E1BE,cA9Eb,SAAAA,EAAYjB,GAAO,IAAAkB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,IACN,IAAMyB,EAAS,6xBAgBTC,EAAW,IAAIC,IAAOC,SAlBX,OAoBjBF,EAASG,KAAO,SAACC,EAAMC,EAAO9B,GAAd,kBAAA+B,OAAmCF,EAAnC,aAAAE,OAAmDD,EAAnD,sBAAAC,OAA6E/B,EAA7E,SAGhB0B,IAAOM,WAAW,CAChBC,QAAQ,EACRR,SAAUA,IAIZR,EAAKiB,MAAQ,CACXlC,KAAMwB,EACNV,SAAUG,EAAKkB,YAAYX,IAE7BP,EAAKmB,aAAenB,EAAKmB,aAAaC,KAAlBnB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAD,KAjCHA,4EAoCNsB,GACX,IAAMC,EAAYD,EAAME,OAAOC,MAC/BtB,KAAKuB,SAAS,CACZ3C,KAAMwC,EACN1B,SAAUM,KAAKe,YAAYK,yCAInBxC,GAGV,MADiB,CAAE4C,OADAlB,IAAO1B,EAAM,CAAE6C,UAAU,sCAM5C,IAAM7C,EAAOoB,KAAKc,MAAMlC,KAClBc,EAAWM,KAAKc,MAAMpB,SACtBb,EAASmB,KAAKgB,aACpB,OACElC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,MAAI0C,UAAU,oBAAd,wBAKJ5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK0C,GAAG,KACN7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAgBhD,KAAMA,EACpBC,OAAQA,KAEZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK0C,GAAG,KACN7C,EAAAC,EAAAC,cAAC6C,EAAD,CACEnC,SAAUA,cAvEQoC,aCDhCC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAuBC,SAASC,eAAe","file":"static/js/main.fd0b2d16.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormGroup, Label, Input, Jumbotron } from 'reactstrap';\r\n\r\nconst MarkdownEditor = (props) => {\r\n    const text = props.text;\r\n    const change = props.change;\r\n    return (\r\n        <Jumbotron>\r\n            <FormGroup>\r\n                <Label for=\"editor\">\r\n                    Enter Github flavored markdown here :\r\n            </Label>\r\n                <Input type=\"textarea\"\r\n                    name=\"editor\"\r\n                    id=\"editor\"\r\n                    rows=\"20\"\r\n                    onChange={change}\r\n                    defaultValue={text} />\r\n            </FormGroup>\r\n        </Jumbotron>\r\n    );\r\n};\r\n\r\nexport default MarkdownEditor;","import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nconst MarkdownPreview = (props) => {\r\n    const htmlText = props.htmlText;\r\n    return (\r\n        <Jumbotron>\r\n            <p>See the parsed result here :</p>\r\n            <section id=\"preview\"\r\n                dangerouslySetInnerHTML={htmlText} />\r\n        </Jumbotron>\r\n    );\r\n};\r\n\r\nexport default MarkdownPreview;","import React, { Component } from 'react';\r\nimport MarkdownEditor from './MarkdownEditor';\r\nimport MarkdownPreview from './MarkdownPreview';\r\nimport marked from 'marked';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass MarkdownPreviewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const onloadStr = `# Markdown Previewer\\n## A markdown previewer\\n[link to the exercise](https://learn.freecodecamp.org/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer/)\\n\r\n\\`\\`\\`javascript\r\nimport marked from 'marked';\r\ngetMarkdown(text) {\r\n  const markedText = marked(text, { sanitize: true });\r\n  const htmlText = { __html: markedText };\r\n  return htmlText;\r\n}\r\n\\`\\`\\`\r\n* you can parse\\n- you may parse\\n+ you must parse\\n\r\nThere is some \\`inline code\\` here, but it sucks...\\n\r\n> Parse it if you want it\\n> If you don't want to parse, don't parse\\n> If you want to parse, parse\\n> If you don't know, or if you don't know what is parsing, parse\\n\r\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Parse plz\")\\nParse, **parse** or __parse__.\r\n\r\n`;\r\n    // Link renderer\r\n    const renderer = new marked.Renderer();\r\n\r\n    renderer.link = (href, title, text) => `<a href=\"${href}\" title=\"${title}\" target=\"_blank\">${text}</a>`;\r\n    \r\n    // Set breaks and new renderer (optional)\r\n    marked.setOptions({\r\n      breaks: true,\r\n      renderer: renderer\r\n    });\r\n\r\n\r\n    this.state = {\r\n      text: onloadStr,\r\n      htmlText: this.getMarkdown(onloadStr)\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const textValue = event.target.value;\r\n    this.setState({\r\n      text: textValue,\r\n      htmlText: this.getMarkdown(textValue)\r\n    });\r\n  }\r\n\r\n  getMarkdown(text) {\r\n    const markedText = marked(text, { sanitize: true });\r\n    const htmlText = { __html: markedText };\r\n    return htmlText;\r\n  }\r\n\r\n  render() {\r\n    const text = this.state.text;\r\n    const htmlText = this.state.htmlText;\r\n    const change = this.handleChange;\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <h1 className=\"text-center my-5\">\r\n              Markdown Previewer\r\n            </h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs='6'>\r\n            <MarkdownEditor text={text}\r\n              change={change} />\r\n          </Col>\r\n          <Col xs='6'>\r\n            <MarkdownPreview\r\n              htmlText={htmlText} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarkdownPreviewer;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MarkdownPreviewer from './components/MarkdownPreviewer';\r\n\r\nReactDOM.render(<MarkdownPreviewer />, document.getElementById('root'));"],"sourceRoot":""}